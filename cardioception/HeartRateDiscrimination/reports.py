# Author: Nicolas Legrand <nicolas.legrand@cfin.au.dk>

import numpy as np
import bayesfit as bf
import seaborn as sns
from pingouin import madmedianrule
import matplotlib.pyplot as plt


def plot_psychometrics(results_df, path):
    """Plot psychometric functions.

    Parameters
    ----------
    results_df : pandas DataFrame
        The behavioral results generated by the run function.
    path : str
        The subject folder.

    Returns
    -------
    Will save 'convergence', 'rt', 'confidence' as png files in the subject's
    folder.
    """
    # Plot convergence
    sns.set_context('talk')
    plt.figure(figsize=(12, 4))
    plt.subplot(121)

    # Convergence line
    revers = np.abs(results_df.Alpha[results_df.Accuracy == 0])
    conv = np.median(revers[~madmedianrule(revers)])
    plt.axhline(y=conv, linestyle='--')

    # Text
    plt.text(len(results_df)/2, conv*2, 'Convergence: ' + str(conv))

    plt.plot(results_df.nTrials,
             np.abs(results_df.Alpha), 'gray', linestyle='--')
    plt.plot(results_df.nTrials[results_df.Accuracy == 1],
             np.abs(results_df.Alpha[results_df.Accuracy == 1]), 'bo')
    plt.plot(results_df.nTrials[results_df.Accuracy == 0],
             np.abs(results_df.Alpha[results_df.Accuracy == 0]), 'ro')

    plt.ylabel('Noise (bpm)')
    plt.xlabel('Trials')
    plt.title('Noise convergence')

    # Using actual heart rate
    plt.subplot(122)
    # True HR
    plt.plot(results_df.HR, 'gray', linestyle='--', marker='o',
             alpha=0.5, label='True HR')

    # Estimated HR
    plt.plot(results_df.nTrials[results_df.Accuracy == 1],
             results_df.HR[results_df.Accuracy == 1] + results_df.Alpha[results_df.Accuracy == 1], 'bo')
    plt.plot(results_df.nTrials[results_df.Accuracy == 0],
             results_df.HR[results_df.Accuracy == 0] + results_df.Alpha[results_df.Accuracy == 0], 'ro')
    plt.plot(results_df.nTrials,
             results_df.HR + results_df.Alpha, color='b', linestyle='--', label='Estimate')

    plt.ylabel('BPM')
    plt.xlabel('Trials')
    plt.legend()
    plt.title('Heart rate convergence')
    sns.despine()
    plt.tight_layout()
    plt.savefig(path + 'convergence.png', dpi=600)
    plt.close()

    # Response time
    sns.boxplot(data=results_df, x='Condition', y='EstimationRT',
                hue='Accuracy')
    sns.stripplot(data=results_df, x='Condition', y='EstimationRT',
                  hue='Accuracy', dodge=True, color='k')
    plt.xlabel('Response time (s)')
    plt.ylabel('RT (s)')
    sns.despine()
    plt.tight_layout()
    plt.savefig(path + 'rt.png', dpi=600)
    plt.close()

    # Confidence
    for conf in range(1, 8):
        # Correct trials
        p = len(
            results_df[(results_df.Accuracy == 0) &
                       (results_df.Confidence == conf)]) / len(
                                results_df[results_df.Accuracy == 0])
        plt.bar(conf-0.15, p, width=0.30, color='r')

        # Incorrect trials
        p = len(
            results_df[(results_df.Accuracy == 1) &
                       (results_df.Confidence == conf)]) / len(
                        results_df[results_df.Accuracy == 1])
        plt.bar(conf+0.15, p, width=0.30, color='g')
    plt.ylabel('P(Rating|Precision)')
    plt.xlabel('Confidence rating')
    plt.xticks(range(1, 8))
    sns.despine()
    plt.tight_layout()
    plt.savefig(path + 'confidence.png', dpi=600)
    plt.close()

    # Posterior surface
    df = results_df.copy()
    df.Alpha = np.abs(df.Alpha)
    data = np.zeros((len(df.Alpha.unique()), 3))
    for ii, intensity in enumerate(np.sort(df.Alpha.unique())):

        # Store results
        data[ii, 0] = int(intensity)
        data[ii, 1] = int(len(df[(df.Alpha == intensity) &
                          (df.Accuracy == 1)]))
        data[ii, 2] = int(len(df[(df.Alpha == intensity)]))

    # Define cumulative normal function to use as sigmoidal function
    sigmoid_type = 'norm'

    # List of logical arguments which correspond to: scale, slope,
    # gamma, lambda
    param_free = [True, True, False, False]

    # Define priors for scale and slope parameters (here mu, and sigma)
    priors = ['Norm(10,2)', 'Norm(10,2)', None, None]

    # Fit model
    metrics, options = bf.fitmodel(data, param_free=param_free,
                                   priors=priors, sigmoid_type=sigmoid_type)

    bf.plot_posterior(metrics)
    plt.savefig(path + 'posterior.png', dpi=600)
    plt.close()

    # Psychometric curve
    bf.plot_psyfcn(data, options, metrics)
    plt.savefig(path + 'psychometric.png', dpi=600)
    plt.close()
