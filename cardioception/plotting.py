# Author: Nicolas Legrand <nicolas.legrand@cfin.au.dk>

import numpy as np
import seaborn as sns
from pingouin import madmedianrule
import matplotlib.pyplot as plt


def hrd_convergence(results_df, path=None):
    """Plot the trial by trial performances.

    Parameters
    ----------
    results_df : pandas DataFrame
        The behavioral results generated by the run function.
    path : str | None
        Result folder.

    Returns
    -------
    fig, ax : Matplotlib instances.
    """
    # Plot convergence
    sns.set_context('talk')
    fig, ax = plt.subplots(figsize=(12, 4))
    plt.subplot(121)

    # Convergence line
    revers = np.abs(results_df.Alpha[results_df.Accuracy == 0])
    conv = np.median(revers[~madmedianrule(revers)])
    plt.axhline(y=conv, linestyle='--')

    # Text
    plt.text(len(results_df)/2, conv*2, 'Convergence: ' + str(conv))

    plt.plot(results_df.nTrials,
             np.abs(results_df.Alpha), 'gray', linestyle='--')
    plt.plot(results_df.nTrials[results_df.Accuracy == 1],
             np.abs(results_df.Alpha[results_df.Accuracy == 1]), 'bo')
    plt.plot(results_df.nTrials[results_df.Accuracy == 0],
             np.abs(results_df.Alpha[results_df.Accuracy == 0]), 'ro')

    plt.ylabel('Noise (bpm)')
    plt.xlabel('Trials')
    plt.title('Noise convergence')

    # Using actual heart rate
    plt.subplot(122)
    # True HR
    plt.plot(results_df.HR, 'gray', linestyle='--', marker='o',
             alpha=0.5, label='True HR')

    # Estimated HR
    plt.plot(results_df.nTrials[results_df.Accuracy == 1],
             results_df.HR[results_df.Accuracy == 1] +
             results_df.Alpha[results_df.Accuracy == 1], 'bo')
    plt.plot(results_df.nTrials[results_df.Accuracy == 0],
             results_df.HR[results_df.Accuracy == 0] +
             results_df.Alpha[results_df.Accuracy == 0], 'ro')
    plt.plot(results_df.nTrials,
             results_df.HR + results_df.Alpha, color='b', linestyle='--',
             label='Estimate')

    plt.ylabel('BPM')
    plt.xlabel('Trials')
    plt.legend()
    plt.title('Heart rate convergence')
    sns.despine()
    plt.tight_layout()
    if path is not None:
        plt.savefig(path + 'convergence.png', dpi=600)

    return fig, ax


def plot_confidence(confidence, accuracy, path=None):
    """Plot confidence distribution for correct and incorrect responses.

    Parameters
    ----------
    confidence : 1d array
        Array containing the confidence values.
    accuracy : 1d array
        Array containing the accuracy (correct/incorrect) values.
    path : str | None
        Result folder.

    Returns
    -------
    fig, ax : Matplotlib instances.
    """
    fig, ax = plt.subplots(figsize=(8, 5))

    # Confidence
    for conf in range(1, 8):
        # Correct trials
        p = sum((accuracy == 0) & (confidence == conf)) / sum(accuracy == 0)
        plt.bar(conf-0.15, p, width=0.30, color='r')

        # Incorrect trials
        p = sum((accuracy == 1) & (confidence == conf)) / sum(accuracy == 1)
        plt.bar(conf+0.15, p, width=0.30, color='g')
    plt.ylabel('P(Rating|Precision)')
    plt.xlabel('Confidence rating')
    plt.xticks(range(1, 8))
    sns.despine()
    plt.tight_layout()
    if path is not None:
        plt.savefig(path + 'confidence.png', dpi=600)

    return fig, ax
